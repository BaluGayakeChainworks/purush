/**
 * This code was generated by [React Native](https://www.npmjs.com/package/@react-native/gradle-plugin).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 */

#include "autolinking.h"
#include <RNDateTimePickerCGen.h>
#include <RNCGeolocationSpec.h>
#include <rnpicker.h>
#include <react/renderer/components/rnpicker/ComponentDescriptors.h>
#include <rnmapbox_maps_specs.h>
#include <react/renderer/components/rnmapbox_maps_specs/ComponentDescriptors.h>
#include <rndocumentpicker.h>
#include <rngesturehandler_codegen.h>
#include <react/renderer/components/rngesturehandler_codegen/ComponentDescriptors.h>
#include <RNImagePickerSpec.h>
#include <RNPermissionsSpec.h>
#include <rnreanimated.h>
#include <safeareacontext.h>
#include <react/renderer/components/safeareacontext/ComponentDescriptors.h>
#include <rnscreens.h>
#include <react/renderer/components/rnscreens/ComponentDescriptors.h>
#include <RNVectorIconsSpec.h>

namespace facebook {
namespace react {

std::shared_ptr<TurboModule> autolinking_ModuleProvider(const std::string moduleName, const JavaTurboModule::InitParams &params) {
auto module_RNDateTimePickerCGen = RNDateTimePickerCGen_ModuleProvider(moduleName, params);
if (module_RNDateTimePickerCGen != nullptr) {
return module_RNDateTimePickerCGen;
}
auto module_RNCGeolocationSpec = RNCGeolocationSpec_ModuleProvider(moduleName, params);
if (module_RNCGeolocationSpec != nullptr) {
return module_RNCGeolocationSpec;
}
auto module_rnpicker = rnpicker_ModuleProvider(moduleName, params);
if (module_rnpicker != nullptr) {
return module_rnpicker;
}
auto module_rnmapbox_maps_specs = rnmapbox_maps_specs_ModuleProvider(moduleName, params);
if (module_rnmapbox_maps_specs != nullptr) {
return module_rnmapbox_maps_specs;
}
auto module_rndocumentpicker = rndocumentpicker_ModuleProvider(moduleName, params);
if (module_rndocumentpicker != nullptr) {
return module_rndocumentpicker;
}
auto module_rngesturehandler_codegen = rngesturehandler_codegen_ModuleProvider(moduleName, params);
if (module_rngesturehandler_codegen != nullptr) {
return module_rngesturehandler_codegen;
}
auto module_RNImagePickerSpec = RNImagePickerSpec_ModuleProvider(moduleName, params);
if (module_RNImagePickerSpec != nullptr) {
return module_RNImagePickerSpec;
}
auto module_RNPermissionsSpec = RNPermissionsSpec_ModuleProvider(moduleName, params);
if (module_RNPermissionsSpec != nullptr) {
return module_RNPermissionsSpec;
}
auto module_rnreanimated = rnreanimated_ModuleProvider(moduleName, params);
if (module_rnreanimated != nullptr) {
return module_rnreanimated;
}
auto module_safeareacontext = safeareacontext_ModuleProvider(moduleName, params);
if (module_safeareacontext != nullptr) {
return module_safeareacontext;
}
auto module_rnscreens = rnscreens_ModuleProvider(moduleName, params);
if (module_rnscreens != nullptr) {
return module_rnscreens;
}
auto module_RNVectorIconsSpec = RNVectorIconsSpec_ModuleProvider(moduleName, params);
if (module_RNVectorIconsSpec != nullptr) {
return module_RNVectorIconsSpec;
}
  return nullptr;
}

std::shared_ptr<TurboModule> autolinking_cxxModuleProvider(const std::string moduleName, const std::shared_ptr<CallInvoker>& jsInvoker) {

  return nullptr;
}

void autolinking_registerProviders(std::shared_ptr<ComponentDescriptorProviderRegistry const> providerRegistry) {
providerRegistry->add(concreteComponentDescriptorProvider<RNCAndroidDialogPickerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNCAndroidDropdownPickerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXAtmosphereComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXBackgroundLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXCalloutComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXCameraComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXCircleLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXCustomLocationProviderComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXFillExtrusionLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXFillLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXHeatmapLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXImageComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXImageSourceComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXImagesComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXLightComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXLineLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXMapViewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXMarkerViewContentComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXMarkerViewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXModelLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXModelsComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXNativeUserLocationComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXPointAnnotationComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXRasterDemSourceComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXRasterLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXRasterSourceComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXShapeSourceComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXSkyLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXStyleImportComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXSymbolLayerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXTerrainComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXVectorSourceComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNMBXViewportComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNGestureHandlerButtonComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNGestureHandlerRootViewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNCSafeAreaProviderComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNCSafeAreaViewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSFullWindowOverlayComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenContainerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenNavigationContainerComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenStackHeaderConfigComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenStackHeaderSubviewComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenStackComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSSearchBarComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenFooterComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSScreenContentWrapperComponentDescriptor>());
providerRegistry->add(concreteComponentDescriptorProvider<RNSModalScreenComponentDescriptor>());
  return;
}

} // namespace react
} // namespace facebook